name: CI/CD Docker Build & Deploy to EC2

on:
  push:
    branches: [main]  # Trigger on push to cd branch

  workflow_dispatch:  # Manual trigger for testing

permissions:
  contents: read
  security-events: write   # required for SARIF uploads

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_IMAGE }}
  DOCKERHUB_TAG: ${{ secrets.DOCKERHUB_TAG }}
  DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
  DOCKER_CONTAINER_PORT: ${{ secrets.DOCKER_CONTAINER_PORT }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_IP_ADDRESS: ${{ secrets.EC2_IP_ADDRESS }}

jobs:

  lint-and-scan:
    name: Lint and Scan the code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app   #applies to all run: steps
    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Node.js setup
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm install
        # run: npm ci

      # Delete after running npm install command in dev terminal and adding to package
      # - name: Install ESLint
      #   run: npm install --save-dev eslint@9

      - name: Install ESLint and Plugins
        run: npm install --save-dev eslint@9 @eslint/js eslint-plugin-n


      # Run ESLint
      - name: Run ESLint
        run: npx eslint .

      # Dependency audit
      - name: NPM Audit
        run: npm audit --audit-level=moderate

      # Lint Dockerfile
      - name: Dockerfile Lint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile

  build:
    name: 🛠️ CI - Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-scan

    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v3
      
    #   - name: Setup Qemu
    #     uses: docker/setup-qemu-action@v3

    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v3

    #   - name: Login to Docker Hub
    #     uses: docker/login-action@v3
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}

    #   - name: Build and push Docker image
    #     uses: docker/build-push-action@v6
    #     with:
    #       context: .
    #       file: ./Dockerfile
    #       push: true
    #       platforms: linux/amd64
    #       tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE }}:${{ secrets.DOCKERHUB_TAG }}
    #       no-cache: true

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Login to Docker Hub
        run: echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      - name: 🏗 Build Docker image (native amd64)
        run: |
          docker build -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG} .
    
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE }}:${{ env.DOCKERHUB_TAG }}'
          format: 'sarif'
          # exit-code: '1'   # fail if vulnerabilities found
          # vuln-type: 'os,library'
          # severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🚀 Push image to Docker Hub
        run: |
          docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG}

      - name: 🛠 Debug - show Docker image architecture
        run: |
          docker inspect ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG} --format='OS: {{.Os}}, Arch: {{.Architecture}}'
          
  # deploy:
  #   name: 🚀 CD - Deploy to EC2
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Save and Set permissions for private key
  #       run: |
  #         echo "${{ env.AWS_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > key.pem
  #         chmod 600 key.pem

  #     - name: Upload deploy script to EC2 and set executable permissions
  #       run: |
  #         scp -o StrictHostKeyChecking=no -i key.pem ./scripts/deploy.sh ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }}:~/deploy.sh
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }} "chmod +x ~/deploy.sh"

  #     - name: Run deploy script on EC2
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem \
  #         ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }} \
  #         "export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' && \
  #          export DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}' && \
  #          export DOCKERHUB_IMAGE='${{ secrets.DOCKERHUB_IMAGE }}' && \
  #          export DOCKERHUB_TAG='${{ secrets.DOCKERHUB_TAG }}' && \
  #          export DOCKER_CONTAINER_PORT='${{ secrets.DOCKER_CONTAINER_PORT }}' && \
  #          export DOCKER_CONTAINER_NAME='${{ secrets.DOCKER_CONTAINER_NAME }}' && \
  #          bash ~/deploy.sh"
