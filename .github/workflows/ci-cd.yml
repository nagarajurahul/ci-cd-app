name: CI/CD Docker Build & Deploy to EC2

on:
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write   # required for SARIF uploads

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_IMAGE }}
  DOCKERHUB_TAG: ${{ secrets.DOCKERHUB_TAG }}
  DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
  DOCKER_CONTAINER_PORT: ${{ secrets.DOCKER_CONTAINER_PORT }}

  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_IP_ADDRESS: ${{ secrets.EC2_IP_ADDRESS }}

  environment: dev
  values_file: ci-cd-app/values.yaml
  GITOPS_REPO_NAME: nagarajurahul/helm-charts

jobs:

  lint-and-scan:
    name: Lint and Scan the code
    runs-on: ubuntu-24.04

    defaults:
      run:
        working-directory: ./app   #applies to 'run:' inside all steps

    steps:

      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v5

      # Node.js setup
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm install
        # run: npm ci

      # Delete after running npm install command in dev terminal and adding to package.json
      - name: Install ESLint and Plugins
        run: npm install --save-dev eslint@9 @eslint/js eslint-plugin-n

      # Run ESLint
      - name: Run ESLint
        run: npx eslint .

      # Dependency audit
      - name: NPM Audit
        run: npm audit --audit-level=moderate

      # Lint Dockerfile
      - name: Dockerfile Lint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile

  ci:
    name: 🛠️ CI - Build, Scan & Push Docker Image
    runs-on: ubuntu-24.04
    needs: lint-and-scan

    steps:

      - name: 📥 Checkout code
        uses: actions/checkout@v5


      - name: Setup Qemu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Set IMAGE_TAG
        id: vars
        run: echo "IMAGE_TAG=${{ env.environment }}-${GITHUB_SHA}" >> $GITHUB_OUTPUT


      - name: 🐳 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗 Build Docker image (no push yet)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false                      # only build, so that we can scan image using Trivy
          load: true                       # load image into runner’s Docker engine
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.IMAGE_TAG }}
          
      # - name: 🐳 Login to Docker Hub
      #   run: echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      # - name: 🏗 Build Docker image (no push yet)
      #   env:
      #     IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
      #   run: |
      #     docker build -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} .
    
     
      - name: 🔍 Run Trivy vulnerability scanner
        id: trivy
        continue-on-error: true  # don’t stop pipeline, even if vulnerabilities found, ensures reporting
        uses: aquasecurity/trivy-action@0.28.0
        with:
          # image-ref: alpine:3.10   # for testing security and reporting
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'   # fail if vulnerabilities found
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        if: always()   # run even if Trivy step failed, ensures reporting
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: ⛔ Gatekeeper - fail pipeline on CRITICAL/HIGH vulns
        if: steps.trivy.outcome == 'failure'
        run: |
          echo "❌ Blocking pipeline: CRITICAL/HIGH vulnerabilities detected by Trivy."
          exit 1

      
      - name: 🚀 Push Docker image (only if scan passed)
        if: steps.trivy.outcome == 'success'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.IMAGE_TAG }}

      # - name: 🚀 Push image to Docker Hub
      #   if: steps.trivy.outcome == 'success'
      #   env:
      #     IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
      #   run: |
      #     docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}


      # ADD SBOM + SIGNING STEPS

      - name: Generate SBOM (CycloneDX JSON)
        if: steps.trivy.outcome == 'success'
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.IMAGE_TAG }} -o cyclonedx-json > sbom.json

      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      - name: Sign Docker Image with Cosign
        if: steps.trivy.outcome == 'success'
        run: |
          curl -sSfL https://raw.githubusercontent.com/sigstore/cosign/main/install.sh | sh -s -- -b /usr/local/bin
          cosign sign --yes --key env://COSIGN_KEY \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.IMAGE_TAG }}
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}


      - name: 🛠 Debug - show Docker image architecture
        env:
          IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
        run: |
          docker inspect ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} --format='OS: {{.Os}}, Arch: {{.Architecture}}'

  update-gitops:
      name: Update the image tag in GitOps Repo
      runs-on: ubuntu-24.04
      needs: ci
      if: needs.ci.result == 'success'

      steps:

        - name: Checkout GitOps repo
          uses: actions/checkout@v5
          with:
            repository: ${{ env.GITOPS_REPO_NAME }}
            token: ${{ secrets.GITOPS_REPO_TOKEN }}
            path: gitops

        - name: Set IMAGE_TAG
          id: vars
          run: echo "IMAGE_TAG=${{ env.environment }}-${GITHUB_SHA}" >> $GITHUB_OUTPUT

        - name: Update image tag in values.yaml
          run: |
            cd gitops
            yq -i '.image.tag = "${{ steps.vars.outputs.IMAGE_TAG }}"' ${{ env.values_file }}


          # https://github.com/marketplace/actions/create-pull-request

        # - name: Create Pull Request for GitOps Repo
        #   uses: peter-evans/create-pull-request@v7
        #   with:
        #     path: gitops
        #     token: ${{ secrets.GITOPS_REPO_TOKEN }}
        #     commit-message: "Update image to ${{ steps.vars.outputs.IMAGE_TAG }}"
        #     branch: "update-image-${{ steps.vars.outputs.IMAGE_TAG }}"
        #     title: "Update image to ${{ steps.vars.outputs.IMAGE_TAG }}"
        #     body: "Automated update of image version for ${{ env.environment }} from CI Pipeline"


        - name: Create Pull Request for GitOps Repo
          env:
            GH_TOKEN: ${{ secrets.GITOPS_REPO_TOKEN }}
            IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
            BRANCH: update-image-${{ steps.vars.outputs.IMAGE_TAG }}
          run: |
            cd gitops
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git checkout -b "$BRANCH"

            git add "$values_file"
            git commit -m "Update image to $IMAGE_TAG" || echo "No changes to commit"
            git push origin "$BRANCH"

            # Capture the diff for artifact
            git diff HEAD^ HEAD > ../values-diff.patch || true

            # Create PR
            gh pr create --title "Update image $IMAGE_TAG" --body "Automated update of image version for $environment from CI Pipeline"

        - uses: actions/upload-artifact@v4
          with:
            name: values-diff
            path: values-diff.patch


  # cd:
  #   name: 🚀 CD - Deploy to EC2
  #   runs-on: ubuntu-latest
  #   needs: ci
  #   if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Save and Set permissions for private key
  #       run: |
  #         echo "${{ env.AWS_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > key.pem
  #         chmod 600 key.pem

  #     - name: Upload deploy script to EC2 and set executable permissions
  #       run: |
  #         scp -o StrictHostKeyChecking=no -i key.pem ./scripts/deploy.sh ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }}:~/deploy.sh
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }} "chmod +x ~/deploy.sh"

  #     - name: Run deploy script on EC2
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem \
  #         ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }} \
  #         "export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' && \
  #          export DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}' && \
  #          export DOCKERHUB_IMAGE='${{ secrets.DOCKERHUB_IMAGE }}' && \
  #          export DOCKERHUB_TAG='${{ secrets.DOCKERHUB_TAG }}' && \
  #          export DOCKER_CONTAINER_PORT='${{ secrets.DOCKER_CONTAINER_PORT }}' && \
  #          export DOCKER_CONTAINER_NAME='${{ secrets.DOCKER_CONTAINER_NAME }}' && \
  #          bash ~/deploy.sh"
