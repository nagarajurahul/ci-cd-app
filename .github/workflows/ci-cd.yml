name: CI/CD Docker Build & Deploy to EC2

on:
  push:
    branches: [cd]  # Trigger on push to cd branch

  workflow_dispatch:  # Manual trigger for testing

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_IMAGE }}
  DOCKER_CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_IP_ADDRESS: ${{ secrets.EC2_IP_ADDRESS }}

jobs:
  build:
    name: 🛠️ CI - Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE }}:latest

  deploy:
    name: 🚀 CD - Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Save and Set permissions for private key
        run: |
          echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Upload deploy script to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem scripts/deploy.sh ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }}:~/deploy.sh
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }} "chmod +x ~/deploy.sh"

      - name: Run deploy script on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem \
          ${{ env.EC2_USERNAME }}@${{ env.EC2_IP_ADDRESS }} \
          "export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' && \
           export DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}' && \
           export DOCKERHUB_IMAGE='${{ secrets.DOCKERHUB_IMAGE }}' && \
           export DOCKER_CONTAINER_NAME='${{ secrets.DOCKER_CONTAINER_NAME }}' && \
           bash ~/deploy.sh"
